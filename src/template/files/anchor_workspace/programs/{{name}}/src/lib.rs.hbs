use anchor_lang::prelude::*;

declare_id!("Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS");

#[program]
pub mod {{name}} {
    use super::*;

    // Instructions
    {{#each instructions}}
    pub fn {{snakecase this.name}}(ctx: Context<{{this.name}}>) -> Result<()> {
        Ok(())
    }

    {{/each}}
}

// Context
{{#each instructions}}
#[derive(Accounts)]
pub struct {{this.name}}<'info> {
    {{#each this.accounts}}
    #[account(mut)]
    pub {{this.name}}: AccountInfo<'info>,
    {{/each}}
}

{{/each}}
// Accounts
{{#each accounts}}
#[account]
pub struct {{this.name}} {
    {{#each this.type.fields}}
    pub {{this.name}}: {{this.type}},
    {{/each}}
}

{{/each}}
// Additional structures
{{#each types}}
#[derive(Debug, Clone, AnchorSerialize, AnchorDeserialize)]
pub struct {{this.name}} {
    {{#each this.type.fields}}
    pub {{this.name}}: {{this.type}},
    {{/each}}
}

{{/each}}
// Events
{{#each events}}
#[event]
pub struct {{this.name}} {
    {{#each this.fields}}
    pub {{this.name}}: {{this.type}},
    {{/each}}
}

{{/each}}
// Errors
#[error_code]
pub enum ErrorCode {
    {{#each errors}}
    #[msg("{{this.msg}}")]
    {{this.name}},
    {{/each}}
}
