use anchor_lang::prelude::*;

declare_id!("Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS");

#[program]
pub mod {{name}} {
    use super::*;

    // Instructions
    {{#each instructions}}
    pub fn {{snakecase this.name}}(
        ctx: Context<{{pascalcase this.name}}>,
        {{#each this.args}}
        {{snakecase this.name}}: {{{type_from_account_field this.type}}},
        {{/each}}
    ) -> Result<()> {
        // Your code here

        Ok(())
    }

    {{/each}}
}

// Context
{{#each instructions}}
#[derive(Accounts)]
pub struct {{pascalcase this.name}}<'info> {
    {{#each this.accounts}}
    #[account(mut)]
    pub {{snakecase this.name}}: AccountInfo<'info>,
    {{/each}}
}

{{/each}}
// Accounts
{{#each accounts}}
#[account]
pub struct {{this.name}} {
    {{#each this.type.fields}}
    pub {{snakecase this.name}}: {{{type_from_account_field this.type}}},
    {{/each}}
}

{{/each}}
// Types
{{#each types}}
#[derive(Debug, Clone, AnchorSerialize, AnchorDeserialize)]
{{#if (eq this.type.kind "struct")}}
pub struct {{this.name}} {
    {{#each this.type.fields}}
    pub {{this.name}}: {{{type_from_account_field this.type}}},
    {{/each}}
}
{{/if}}
{{#if (eq this.type.kind "enum")}}
pub enum {{this.name}} {
    {{#each this.type.variants}}
    {{this.name}},
    {{/each}}
}
{{/if}}

{{/each}}
// Events
{{#each events}}
#[event]
pub struct {{this.name}} {
    {{#each this.fields}}
    pub {{snakecase this.name}}: {{{type_from_account_field this.type}}},
    {{/each}}
}

{{/each}}
// Errors
#[error_code]
pub enum ErrorCode {
    {{#each errors}}
    #[msg("{{{this.msg}}}")]
    {{this.name}},
    {{/each}}
}
